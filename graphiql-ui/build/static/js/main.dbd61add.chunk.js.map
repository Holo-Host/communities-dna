{"version":3,"sources":["../node_modules/graphql-language-service-interface/dist sync /^.*$","App.js","serviceWorker.js","index.js"],"names":["map",".","./","./GraphQLLanguageService","./GraphQLLanguageService.js","./GraphQLLanguageService.js.flow","./autocompleteUtils","./autocompleteUtils.js","./autocompleteUtils.js.flow","./getAutocompleteSuggestions","./getAutocompleteSuggestions.js","./getAutocompleteSuggestions.js.flow","./getDefinition","./getDefinition.js","./getDefinition.js.flow","./getDiagnostics","./getDiagnostics.js","./getDiagnostics.js.flow","./getHoverInformation","./getHoverInformation.js","./getHoverInformation.js.flow","./getOutline","./getOutline.js","./getOutline.js.flow","./index","./index.js","./index.js.flow","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","WS_INTERFACE_URI","GRAPHQL_ZOME_CALL_OBJECT","instance_id","zome","function","callGraphqlZome","initOrGetCallGraphqlZome","_callee","wsClient","callZome","regenerator_default","a","wrap","_context","prev","next","abrupt","connect","sent","t0","console","log","stop","graphQLFetcher","_callee2","graphQLParams","unparsedResult","resultJSON","_context2","variables","JSON","parse","Ok","data","App","react_default","createElement","style","height","dist_default","fetcher","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAA,IAAAA,EAAA,CACAC,IAAA,GACAC,KAAA,GACAC,2BAAA,GACAC,8BAAA,GACAC,mCAAA,IACAC,sBAAA,GACAC,yBAAA,GACAC,8BAAA,IACAC,+BAAA,GACAC,kCAAA,GACAC,uCAAA,IACAC,kBAAA,GACAC,qBAAA,GACAC,0BAAA,IACAC,mBAAA,GACAC,sBAAA,GACAC,2BAAA,IACAC,wBAAA,GACAC,2BAAA,GACAC,gCAAA,IACAC,eAAA,GACAC,kBAAA,GACAC,uBAAA,IACAC,UAAA,GACAC,aAAA,GACAC,kBAAA,KAIA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAF,GACA,OAAAG,EAAAF,GAEA,SAAAC,EAAAF,GACA,IAAAC,EAAA7B,EAAA4B,GACA,KAAAC,EAAA,IACA,IAAAG,EAAA,IAAAC,MAAA,uBAAAL,EAAA,KAEA,MADAI,EAAAE,KAAA,mBACAF,EAEA,OAAAH,EAEAF,EAAAQ,KAAA,WACA,OAAAC,OAAAD,KAAAnC,IAEA2B,EAAAU,QAAAP,EACAQ,EAAAC,QAAAZ,EACAA,EAAAE,GAAA,2NC1CMW,UAEF,MACEC,EAA2B,CAC/BC,YAAe,YACfC,KAAQ,UACRC,SAAY,WAEVC,EAAkB,cAEPC,8EAAf,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACMV,EADN,CAAAQ,EAAAE,KAAA,eAAAF,EAAAG,OAAA,SAC8BX,GAD9B,cAAAQ,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAG2BE,kBAAQjB,GAHnC,cAGUQ,EAHVK,EAAAK,KAIYT,EAAaD,EAAbC,SAERJ,EAAkBI,EAChBR,EAAwB,YACxBA,EAAwB,KACxBA,EAAwB,UAT9BY,EAAAG,OAAA,SAYWX,GAZX,QAAAQ,EAAAC,KAAA,GAAAD,EAAAM,GAAAN,EAAA,SAcIO,QAAQC,IAAI,uDAAZR,EAAAM,IAdJ,yBAAAN,EAAAS,SAAAf,EAAA,kDAkBegB,+EAAf,SAAAC,EAA8BC,GAA9B,IAAAC,EAAAC,EAAA,OAAAjB,EAAAC,EAAAC,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,cAAAa,EAAAb,KAAA,EAC0BT,IAD1B,cACED,EADFuB,EAAAV,KAGEO,EAAcI,UAAYJ,EAAcI,WAAa,GAHvDD,EAAAb,KAAA,EAK+BV,EAAgBoB,GAL/C,cAKQC,EALRE,EAAAV,KAMQS,EAAaG,KAAKC,MAAML,GANhCE,EAAAZ,OAAA,SAQSW,EAAWK,GACd,CAAEC,KAAMH,KAAKC,MAAMJ,EAAWK,KAC9BL,GAVN,wBAAAC,EAAAN,SAAAE,iCAuBeU,mLARX,OACEC,EAAAxB,EAAAyB,cAAA,OAAKC,MAAO,CAAEC,OAAQ,UACpBH,EAAAxB,EAAAyB,cAACG,EAAA5B,EAAD,CAAU6B,QAASjB,YAJTkB,aCnCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOb,EAAAxB,EAAAyB,cAACa,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dbd61add.chunk.js","sourcesContent":["var map = {\n\t\".\": 40,\n\t\"./\": 40,\n\t\"./GraphQLLanguageService\": 82,\n\t\"./GraphQLLanguageService.js\": 82,\n\t\"./GraphQLLanguageService.js.flow\": 248,\n\t\"./autocompleteUtils\": 56,\n\t\"./autocompleteUtils.js\": 56,\n\t\"./autocompleteUtils.js.flow\": 249,\n\t\"./getAutocompleteSuggestions\": 45,\n\t\"./getAutocompleteSuggestions.js\": 45,\n\t\"./getAutocompleteSuggestions.js.flow\": 250,\n\t\"./getDefinition\": 57,\n\t\"./getDefinition.js\": 57,\n\t\"./getDefinition.js.flow\": 251,\n\t\"./getDiagnostics\": 59,\n\t\"./getDiagnostics.js\": 59,\n\t\"./getDiagnostics.js.flow\": 252,\n\t\"./getHoverInformation\": 60,\n\t\"./getHoverInformation.js\": 60,\n\t\"./getHoverInformation.js.flow\": 253,\n\t\"./getOutline\": 81,\n\t\"./getOutline.js\": 81,\n\t\"./getOutline.js.flow\": 254,\n\t\"./index\": 40,\n\t\"./index.js\": 40,\n\t\"./index.js.flow\": 255\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 121;","import React, { Component } from 'react'\nimport GraphiQL from 'graphiql'\nimport { connect } from '@holochain/hc-web-client'\nimport 'graphiql/graphiql.css'\n\n// Uses conductor configured interface when in production\nconst WS_INTERFACE_URI = process.env.NODE_ENV === 'development'\n  ? 'ws://localhost:3400'\n  : null\nconst GRAPHQL_ZOME_CALL_OBJECT = {\n  'instance_id': 'hylo-chat',\n  'zome': 'graphql',\n  'function': 'graphql'\n}\nvar callGraphqlZome = null\n\nasync function initOrGetCallGraphqlZome () {\n  if (callGraphqlZome) return callGraphqlZome\n  try {\n    const wsClient = await connect(WS_INTERFACE_URI)\n    const { callZome } = wsClient\n\n    callGraphqlZome = callZome(\n      GRAPHQL_ZOME_CALL_OBJECT['instance_id'],\n      GRAPHQL_ZOME_CALL_OBJECT['zome'],\n      GRAPHQL_ZOME_CALL_OBJECT['function']\n    )\n\n    return callGraphqlZome\n  } catch (error) {\n    console.log('ðŸ‘Ž Error connecting to websocket interface', error)\n  }\n}\n\nasync function graphQLFetcher(graphQLParams) {\n  callGraphqlZome = await initOrGetCallGraphqlZome()\n\n  graphQLParams.variables = graphQLParams.variables || {}\n\n  const unparsedResult = await callGraphqlZome(graphQLParams)\n  const resultJSON = JSON.parse(unparsedResult)\n\n  return resultJSON.Ok\n    ? { data: JSON.parse(resultJSON.Ok) }\n    : resultJSON\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div style={{ height: '100vh' }}>\n        <GraphiQL fetcher={graphQLFetcher} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}